@model CreditRatingModel.Model.IndividualEmiTransaction_Metadata
@using CreditRatingModel.Model;
@{
    ViewBag.Title = "AddIndividualEmiTransaction";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    var grid = new WebGrid(ViewBag.PaidTransactionList);
    //grid.Pager(WebGridPagerModes.All);
}
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
   <br />
<html>
    <head>
        <title>AddIndividualInstallmentTransaction</title>
        <link href="~/js/jquery-ui.css" rel="stylesheet" />
    @*    <script src="~/js/jquery-ui.min.js"></script>*@
    </head>
<body>
    <div class="container">

        <div class="panel panel-primary">
            <div class="panel-heading"><label id="lblHeading" class="filter-col control-label labelHead">Individual Repayment Transaction</label></div>
            <div class="panel-body">

                
                 <div id="tabs" >
                     
                            <ul>
                                <li  >
                                    <a href="#tabs-1" data-toggle="tab" style="font-size: small; color: #000000; font-weight: bold">Pay Repayment</a>
                                </li>
                                <li >
                                    <a href="#tabs-2" data-toggle="tab" style="font-size: small; color: #000000; font-weight: bold">Paid Repayment Transaction Details</a>
                                </li>
                            </ul>
                @using (Html.BeginForm("AddIndividualEmiTransaction", "IndividualEmiTransaction", FormMethod.Post, new { id = "frmAddIndEmiTransaction" }))
                {
                <div id="tabs-1" class="tab-pane">
                    <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblNationalId" class="filter-col control-label label1">National ID :</label>
                            @Html.TextBoxFor(model => model.NationalId, new { @id = "txtNationalId", @class = "form-control input-sm", @onkeypress = "return isNRCNumber(event)", @onblur = "checkLengthForNRC(this)", @maxlength = "13" })
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblLoanNo" class="filter-col control-label label1">Loan A/C No :</label>
                            <select id="selLoanNo" name="selLoanNo" style="color: black" class="form-control dropdown"></select>
                          @*@Html.DropDownListFor(model=>model.LoanNoList as SelectList)*@
                            
                        </div>
                    </div>
                </div>
                    <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblFullName" class="filter-col control-label label1">Full Name :</label>
                            @Html.TextBoxFor(model => model.FullName, new { @id = "txtFullName", @class = "form-control input-sm", @readonly = "true" })
                            
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblGender" class="filter-col control-label label1">Gender :</label>
                            @{
                    List<SelectListItem> GenderlistItems = new List<SelectListItem>();
                    GenderlistItems.Add(new SelectListItem
                    {
                        Text = "Male",
                        Value = "M"
                    });
                    GenderlistItems.Add(new SelectListItem
                    {
                        Text = "Female",
                        Value = "F",

                    });
                            }
                                   @Html.DropDownListFor(model => model.Gender, GenderlistItems, "", new { @id = "ddlGender", @class = "form-control dropdown", @disabled = "true" })
                                           
                            @*@Html.TextBoxFor(model => model.BranchName, new { @id = "txtBrName", @class = "form-control input-sm", @readonly = "true" })*@
                            
                        </div>
                    </div>
                </div>

                    <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblPanNo" class="filter-col control-label label1">Loan Amount :</label>
                            @Html.TextBoxFor(model => model.LoanAmt, new { @id = "txtLoanAmt", @class = "form-control input-sm", @readonly = "true" })
                            
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                            
                            @*@Html.TextBoxFor(model => model.ChequeNo, new { @id = "txtChNo", @class = "form-control input-sm", @onkeypress = "return isNumber(event)", maxlength = "6"  })*@
                              <label id="lblDisAmt" class="filter-col control-label label1">Disburse Amount :</label>
                            @Html.TextBoxFor(model => model.DisAmt, new { @id = "txtDisAmt", @class = "form-control input-sm", @onkeypress = "return decimalOnly(event)", @readonly = "true" })
                            
                        </div>
                    </div>
                </div>

                    <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                             <label id="lblBalAmt" class="filter-col control-label label1">Balance Amount :</label>
                            @Html.TextBoxFor(model => model.BalAmt, new { @id = "txtBalAmt", @class = "form-control input-sm", @onkeypress = "return decimalOnly(event)", @readonly = "true" })

                         
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                          @*@Html.HiddenFor(model => model.TranId, new { @id="hfTransId"})*@
                        </div>
                    </div>
                </div>


                    <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblRepayMode" class="filter-col control-label label1">Repay Mode :</label>
                             @{
                    List<SelectListItem> RepayModelistItems = new List<SelectListItem>();
                    RepayModelistItems.Add(new SelectListItem
                    {
                        Text = "Cash",
                        Value = "C"
                    });
                    RepayModelistItems.Add(new SelectListItem
                    {
                        Text = "Cheque",
                        Value = "H",

                    });
                            }
                            @Html.DropDownListFor(model => model.RepayMode, RepayModelistItems, "-- Select Payment Mode --", new { @id = "ddlRepayMode", @class = "form-control dropdown" })

                          
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                              <label id="lblRepayAmt" class="filter-col control-label label1">Repayment Amount :</label>
                            @Html.TextBoxFor(model => model.RepayAmt, new { @id = "txtRepayAmt", @class = "form-control input-sm", @onkeypress = "return decimalOnly(event)" , @maxlength="20"})
                           

                            
                        </div>
                    </div>
                </div>

                    <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                               <label id="lblTranNo" class="filter-col control-label label1">Cheque No :</label>
                            @Html.TextBoxFor(model => model.TranNo, new { @id = "txtTranNo", @class = "form-control input-sm",@maxlength = "6" })

                           
                           
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                         
                              <label id="lblChqDt" class="filter-col control-label label1">Cheque/Transaction Date :</label>
                            @Html.TextBoxFor(model => model.ChqDt, new { @id = "txtChqDt", @class = "form-control input-sm", @type = "date" })
                            
                           
                        </div>
                    </div>
                </div>

                     <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblBankName" class="filter-col control-label label1">Bank :</label>
                             @Html.DropDownListFor(model => model.BankId, ViewBag.BankNameList as SelectList, "Select Bank", new { @id = "ddlBankName", @class = "form-control dropdown" })
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div class="form-group">
                            <label id="lblFrAccName" class="filter-col control-label label1">Branch :</label>
                            <select id="selBranch" name="selBranch" style="color: black" class="form-control dropdown"></select>
                            @*@Html.DropDownListFor(model => model.BranchName, ViewBag.BranchNameList as SelectList, "Select Branch", new { @id = "ddlBranchName", @class = "form-control dropdown" })*@
                            @*@Html.TextBoxFor(model => model.FrAccName, new { @id = "txtFrAccName", @class = "form-control input-sm", @onkeypress = "return AllowAlphabet(event)" })*@
                            
                        </div>
                    </div>
                </div>
                     <div class="row">
                    <div class="col-xs-6">
                        <div class="form-group">
                             <label id="lblRemark" class="filter-col control-label label2">Remark :</label>
                            @Html.TextAreaFor(model => model.Remark, new { @id = "txtRemark", @class = "form-control input-sm" })
                        </div>
                    </div>
                </div>

                    <div class="container">
                      <div class="row">
                    <div class="col-xs-4">
                    </div>
                    <div class="col-xs-5">
                        <div class="form-group">
                            <input  id="btnAdd" type="submit" value="Save" formmethod="post"/>
                              <input id="btnClear" type="reset" value="Reset"/>
                        </div>
                    </div>
                    <div class="col-xs-3">
                      
                    </div>
                </div>
                 </div> 
                 
                </div> 
                     }
                <div id="tabs-2" class="tab-pane">
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">
                            <label id="lblELD" class="filter-col control-label label2">Installment Transactions</label>
                         </legend> 
                        <div id="grid" class="panel panel-primary" style=" overflow:auto;min-width:200px">    
                            @if(ViewBag.PaidTransactionList != null)
                            {
                            <table class="table">
                                 <thead>
                                 
                                </thead>
                                <tbody>
                                    <tr class="filters">
                                        @grid.GetHtml(
                                         tableStyle: "table" ,
                                         footerStyle: "webgrid-footer",
                                         columns: grid.Columns(
                                         grid.Column(columnName:"TranId",header:"Transaction Id",style:"webgrid-fixColumn"),
                                         grid.Column(columnName:"ChqDt",header:"Cheque Date",format: item => ((item.ChqDt == null) ? "" : item.ChqDt.ToString("dd/MMM/yyyy")), style: "webgrid-fixColumn"),
                                         grid.Column(columnName:"RepayMode",header:"Repay Mode",style:"webgrid-fixColumn"),
                                         grid.Column(columnName:"RepayAmt",header: "Repayment Amount",style:"webgrid-fixColumn"),
                                         grid.Column(columnName:"status",header:"Transaction Status",style:"webgrid-fixColumn"),
                                         grid.Column(columnName:"Remark",header:"Remark",style:"webgrid-fixColumn")
                                         ))
                                    </tr>
                                </tbody>

                            </table>    
                            } 
                    </div>  
                         <div class="col-xs-6">
                                           <label id="lblTA" class="filter-col control-label label1">Total Loan Amount </label>
                                           @Html.TextBoxFor(model => model.TotalLoanAmount, new {@id="txtTotalLoanAmount", @class = "form-control", @readonly="true" })
                                    </div>
                                    <div class="col-xs-6">
                                        <label id="lblTB" class="filter-col control-label label1">Total Balance Amount </label>
                                           @Html.TextBoxFor(model => model.TotalBalanceAmount, new {@id="txtTotalBalanceAmount",@class = "form-control", @readonly="true" })
                                    </div> 
                    </fieldset> 
                    <div class="container">
                      <div class="row">
                          <div class="col-xs-4">
                              </div> 
                    <div class="col-xs-6">
                        <input id="btnAddNew" type="button" value="Add New"/>
                    </div>
                </div>
                 </div> 
                </div> 

                 </div> 
            </div>
        </div>

    </div>
 

    <script type="text/javascript">

        $("#btnAddNew").click(function () {
            debugger;
            var url = '@Url.Action("AddIndividualEmiTransaction", "IndividualEmiTransaction")';
                //$("#btnAdd").show();
                //$("#btnClear").show();
                window.location.href = url;
            });

            $("#txtNationalId").change(function () {
                var NationalId = $("#txtNationalId").val();
                var url = '@Url.Action("LoanAccountList", "IndividualEmiTransaction")';
        $.post(url, { NationalId: NationalId }, function (data) {
            debugger;
            $("#selLoanNo").empty().append($("<option></option>").val(-1).html('Select'));
            $.each(data, function (Key, item) {
                debugger;
                $("#selLoanNo").append($("<option></option>").val(item.Text).html(item.Text));
            });

            if (data.length == 0) {
                alert('Invalid National ID');
                $('#txtNationalId').val('');
                $("#txtFullName").val('');
                $("#ddlGender").val('');
                $("#txtLoanAmt").val('');
                $("#txtDisAmt").val('');
                $("#txtBalAmt").val('');
            }

        });

            });

        $('#txtNationalId').keypress(function (evt) {
            debugger;
            var NID = $('#txtNationalId').val();

            var charcode = (evt.which) ? evt.which : event.keyCode;
            if (charcode != 8) {
                var chr = ValidateNID(NID);
                $('#txtNationalId').val(chr);
            }

        });

    $("#txtRepayAmt").change(function () {
        debugger;
        var RepayAmt = $("#txtRepayAmt").val();
        var BalAmt = $("#txtBalAmt").val();
        var url = '@Url.Action("greaterAmount", "IndividualEmiTransaction")';
    $.post(url, { Rangefrom: BalAmt, RangeTo: RepayAmt }, function (data) {
        debugger;
        //alert(data);
        if (data == false) {
            debugger;
            alert('Repayment amount should be less than balance amount.');
            $("#txtRepayAmt").val('');
        }
    });
    //if (RepayAmt > BalAmt) {
    //    alert('Repayment amount should be less than balance amount.');
    //    $("#txtRepayAmt").val('');
    //}


});

$('#selLoanNo').change(function () {
    debugger;
    var url = '@Url.Action("LoanDetails", "IndividualEmiTransaction")';
        var SelectedLoanId = $("#selLoanNo").val();
        $.post(url, { LoanAccNo: SelectedLoanId }, function (data) {
            debugger;
            $("#txtFullName").val(data.FullName);
            $("#ddlGender").val(data.Gender);
            $("#txtLoanAmt").val(data.LoanAmt);
            $("#txtDisAmt").val(data.DisAmt);
            $("#txtBalAmt").val(data.BalAmt);
        });

     @*   var url = '@Url.Action("GenerateTransactionNo", "IndividualEmiTransaction")';
        $.post(url, function (data) {
            $("#hfTransId").val(data);
        });*@

    });

    $("#ddlBankName").change(function () {
        var bankId = $("#ddlBankName").val();

        var url = '@Url.Action("BranchList", "IndividualEmiTransaction")';

        $.post(url, { bankId: bankId }, function (data) {

            $("#selBranch").empty().append($("<option></option>").val(-1).html('Select'));

            $.each(data, function (Key, item) {

                $("#selBranch").append($("<option></option>").val(item.Value).html(item.Text));
            });
        });

    });


    $('#ddlRepayMode').change(function () {
        debugger;
        var url = '@Url.Action("onRepaymentModeSelection", "IndividualEmiTransaction")';
        var SelectedRepayVal = $("#ddlRepayMode").val();
        //var TransNo = $("#hfTransId").val();
        if (SelectedRepayVal == 'C') {
            debugger;
            $("#txtTranNo").attr('readonly', true);
            $("#txtChqDt").attr('readonly', true);
            $("#ddlBankName").attr('disabled', true);
            $("#selBranch").attr('disabled', true);
            $("#ddlBankName").val('');
            $("#selBranch").val('');

            $.post(url, function (data) {
                debugger;

                // $("#txtTranNo").val(data.TranNo);
               // $("#txtTranNo").val(TransNo);
                $("#txtChqDt").val(ToJavaScriptDate(data.ChqDt));
                //$("#txtLoanAmt").val(data.LoanAmt);
                //$("#txtDisAmt").val(data.DisAmt);
                //$("#txtBalAmt").val(data.BalAmt);
            });
        }
        if (SelectedRepayVal == 'H') {
            $("#txtTranNo").attr('readonly', false);
            $("#txtChqDt").attr('readonly', false);
            $("#ddlBankName").attr('disabled', false);
            $("#selBranch").attr('disabled', false);

            $("#txtTranNo").val('');
            $("#txtChqDt").val('');
        }

    });

    function ToJavaScriptDate(value) {
        debugger;
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        var d = new Date(dt),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [year, month, day].join('-');
    }



    $(document).ready(function () {

        var currentTab = 0;
        $(function () {
            debugger;
            $("#tabs").tabs({
                disabled: [0, 1, 2],
                select: function (e, i) {
                    currentTab = i.index;
                    return currentTab;
                }
            });
        });

        var a = '@(ViewBag.PaidTransactionList)';
        var TotAmt = '@(ViewBag.TotalAmt)';
        var TotBalAmt = '@(ViewBag.TotalBalAmt)';
        //var LoanAcc = '@(ViewBag.LoanAccNo)';
        if (a != "") {
            debugger;

            alert('@ViewBag.msg');
            var tabs = $('#tabs').tabs();

            tabs.tabs('enable', 1);
            tabs.tabs('option', 'active', 1);

            $("#txtTotalLoanAmount").val(TotAmt);
            $("#txtTotalBalanceAmount").val(TotBalAmt);
            //$("#selLoanNo").val(LoanAcc);
            $("#btnAdd").hide();
            $("#btnClear").hide();
            $('#txtNationalId').attr("readonly", true);
            $('#selLoanNo').attr("readonly", true);
            $('#ddlRepayMode').attr("disabled", true);
            $('#txtRepayAmt').attr("readonly", true);
            $('#txtTranNo').attr("readonly", true);
            $('#txtChqDt').attr("readonly", true);
            $('#ddlBankName').attr("disabled", true);
            $('#selBranch').attr("disabled", true);
            $('#txtRemark').attr("readonly", true);
            var index = $('#tabs li a').index($('a[href="#tabs-2"]').get(0));
            $('#tabs').tabs({ selected: index });
           
        }
    });


    $(function () {
        debugger;
        $('tbody tr').hover(function () {
            $(this).toggleClass('clickable');
        }).on('click', function () {
            debugger;
            //location.href = '/EducationLoanDisbursment/EditEducationLoanDisbursement/' + $(this).find('td:first').text();
          @*  var url = '@Url.Action("RepaymentReceipt", "IndividualEmiTransaction")' + $(this).find('td:first').text();*@
            var url = '/Report/RepaymentReciept/' + $(this).find('td:first').text();
            window.open(url);
        });
    });

    $("#btnAdd").click(function () {
        var frmvalidator = new Validator("frmAddIndEmiTransaction");
        frmvalidator.clearAllValidations();
        frmvalidator.EnableMsgsTogether();

        frmvalidator.addValidation("txtNationalId", "req", "Please enter National Registration No.");
        frmvalidator.addValidation("selLoanNo", "req", "Please select Loan Acoount Number ");
        frmvalidator.addValidation("ddlRepayMode", "req", "Please select Repayment Mode ");
        frmvalidator.addValidation("txtRepayAmt", "req", "Please enter Repayment Amount");
        debugger;
        var SelectedRepayVal = $("#ddlRepayMode").val();
        if (SelectedRepayVal == 'H') {
            frmvalidator.addValidation("txtChqDt", "req", "Please enter cheque Date");
            frmvalidator.addValidation("ddlBankName", "req", "Please select Bank Name");
            frmvalidator.addValidation("selBranch", "req", "Please enter Branch Name");
            frmvalidator.addValidation("txtTranNo", "req", "Please enter Cheque Number");
        }
    });
</script>
</body>
    </html>

@*<script type="text/javascript">
    
</script>  *@
@*<script type="text/javascript">
   
   
</script>*@


